import pytest
import res

class StringCalculator:
    def add(self, numbers):
        if not numbers:
            return 0

        delimiters = [',', '\n']
        if numbers.startswith('//'):
            parts = numbers.split('\n', 1)
            delimiter_section = parts[0][2:]
            numbers = parts[1]

            if delimiter_section.startswith('[') and delimiter_section.endswith(']'):
                custom_delimiters = re.findall(r'\[(.*?)\]', delimiter_section)
                delimiters.extend(custom_delimiters)
            else:
                delimiters.append(delimiter_section)

        pattern = '|'.join(map(re.escape, delimiters))
        number_list = re.split(pattern, numbers)
        total = 0
        for num in number_list:
            if num:
                n = int(num)
                if n < 0:
                    raise ValueError(f"Negatives not allowed: {n}")
                if n <= 1000:
                    total += n
        return total

@pytest.fixture
def calc():
    return StringCalculator()

"""Test that an empty string returns 0."""
def test_empty_string(calc):
    assert calc.add("") == 0

"""Test that a single number returns its own value."""
def test_single_number(calc):
    assert calc.add("5") == 5

"""Test adding two numbers separated by a comma."""
def test_two_numbers_with_comma(calc):
    assert calc.add("1,2") == 3

"""Test adding multiple numbers."""
def test_multi_numbers(calc):
    assert calc.add("1,2,3,4") == 10

"""Test zero included in the input is handled correctly."""
def test_zero_in_input(calc):
    assert calc.add("0,1,2") == 3

"""Test input with a trailing comma is handled correctly."""
def test_input_with_trailing_comma(calc):
    assert calc.add("1,2,") == 3

"""Test input with a leading comma is handled correctly."""
def test_input_with_comma_at_start(calc):
    assert calc.add(",1,2") == 3

"""Test input with spaces around numbers and delimiters is handled correctly."""
def test_input_with_spaces(calc):
    assert calc.add(" 1 , 2 , 3 ") == 6

"""Test custom delimiters with special characters are handled correctly."""
def test_custom_delimiter_with_special_character(calc):
    assert calc.add("//[.]\n1.2.3") == 6

"""Test that newlines can be addressed has delimiters along with commas."""
def test_newline(calc):
    assert calc.add("1\n2,3") == 6

def test_custom_delimiter(calc):
    assert calc.add("//;\n1;2") == 3
