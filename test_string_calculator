class StringCalculator:
    def add(self, numbers):
        return self._calculate(numbers, operation="add")

    def subtract(self, numbers):
        return self._calculate(numbers, operation="subtract")

    def multiply(self, numbers):
        return self._calculate(numbers, operation="multiply")

    def divide(self, numbers):
        return self._calculate(numbers, operation="divide")

    def _calculate(self, numbers, operation):
        if not numbers:
            return 0

        delimiters = [',', '\n']

        if numbers.startswith('//'):
            parts = numbers.split('\n', 1)
            delimiter_section = parts[0][2:]
            numbers = parts[1]

            # Handling multiple custom delimiters
            if delimiter_section.startswith('[') and delimiter_section.endswith(']'):
                custom_delimiters = re.findall(r'\[(.*?)\]', delimiter_section)
                delimiters.extend(custom_delimiters)
            else:
                delimiters.append(delimiter_section)

        pattern = '|'.join(map(re.escape, delimiters))
        number_list = [int(num) for num in re.split(pattern, numbers) if num]

        if operation == "add":
            return sum(number_list)
        elif operation == "subtract":
            return number_list[0] - sum(number_list[1:])
        elif operation == "multiply":
            result = 1
            for num in number_list:
                result *= num
            return result
        elif operation == "divide":
            result = number_list[0]
            for num in number_list[1:]:
                if num == 0:
                    raise ValueError("Division by zero is not allowed")
                result /= num
            return result

@pytest.fixture
def calc():
    return StringCalculator()

"""Test that an empty string returns 0."""
def test_empty_string(calc):
    assert calc.add("") == 0

"""Test that a single number returns its own value."""
def test_single_number(calc):
    assert calc.add("5") == 5

"""Test adding two numbers separated by a comma."""
def test_two_numbers_with_comma(calc):
    assert calc.add("1,2") == 3

"""Test adding multiple numbers."""
def test_multi_numbers(calc):
    assert calc.add("1,2,3,4") == 10

"""Test zero included in the input is handled correctly."""
def test_zero_in_input(calc):
    assert calc.add("0,1,2") == 3

"""Test input with a trailing comma is handled correctly."""
def test_input_with_trailing_comma(calc):
    assert calc.add("1,2,") == 3

"""Test input with a leading comma is handled correctly."""
def test_input_with_comma_at_start(calc):
    assert calc.add(",1,2") == 3

"""Test input with spaces around numbers and delimiters is handled correctly."""
def test_input_with_spaces(calc):
    assert calc.add(" 1 , 2 , 3 ") == 6

"""Test custom delimiters with special characters are handled correctly."""
def test_custom_delimiter_with_special_character(calc):
    assert calc.add("//[.]\n1.2.3") == 6

"""Test that newlines can be addressed has delimiters along with commas."""
def test_newline(calc):
    assert calc.add("1\n2,3") == 6

def test_custom_delimiter(calc):
    assert calc.add("//;\n1;2") == 3

"""Test multiple custom delimiters are handled correctly."""
def test_multiple_delimiters(calc):
    assert calc.add("//[*][%]\n1*2%3") == 6

"""Test mixed usage of custom and default delimiters."""
def test_mix_delimiters(calc):
    assert calc.add("//[;]\n1;2,3\n4") == 10

"""Test that multiple negative numbers raise a ValueError."""
def test_more_than_one_negative_numbers(calc):
    with pytest.raises(ValueError, match="Negatives not allowed"):
        calc.add("-1,-2,3")

"""Test adding two large numbers."""
def test_two_large_numbers(calc):
    assert calc.add("500,400") == 900

def test_large_numbers_with_small_numbers(calc):
    assert calc.add("1000,1001,2") == 2003

def test_large_numbers(calc):
    assert calc.add("1001,2000,3000") == 6001
